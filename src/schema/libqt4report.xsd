<?xml version="1.0" encoding="utf-8" ?>
<xsd:schema	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			targetNamespace="http://corentin-lebail.eu/libqt4report"
			xmlns:lqr="http://corentin-lebail.eu/libqt4report">
	
	<xsd:annotation>
		<xsd:documentation>
			Schema for libqt4report file Last modified date: 28th November, 2012 From Corentin Le Bail
		</xsd:documentation>
	</xsd:annotation>
	
	<xsd:complexType name="fieldObject" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				This type is the base element of all objects from the database.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="id" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Must be unique and respect the [a-zA-Z0-9]* regexp.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="[a-zA-Z0-9]*" /> 
				</xsd:restriction>
			</xsd:simpleType>	
		</xsd:attribute>
		<xsd:attribute name="dataType" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Must take a value from string, integer, real, date or dateTime.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="string" />
					<xsd:pattern value="integer" /> 
					<xsd:pattern value="real" /> 
					<xsd:pattern value="date" /> 
					<xsd:pattern value="dateTime" /> 
				</xsd:restriction>
			</xsd:simpleType>	
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="dbFieldObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from fieldObject, it represent a field from the database used in the report.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:fieldObject">
				<xsd:attribute name="fieldName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be a database filed name.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="userFieldObject" abstract="true" >
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from fieldObject, it represent a user field.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:fieldObject" />
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="expression">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string"/>
		</xsd:simpleType>
	</xsd:element>
	
	<xsd:complexType name="calculatedFieldObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from userFieldObject, it represent a calculated field.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:userFieldObject">
				<xsd:sequence>
					<xsd:element ref="lqr:expression">
						<xsd:annotation>
							<xsd:documentation>
								This element must be an expression compatible with QtScript, you can refer to other fields by surrounding it like this: ${ fieldId }.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="totalFieldObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from userFieldObject, it represent a total field.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:userFieldObject">
				<xsd:attribute name="operation" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must take a value from sum, avg, count, min or max.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="sum" />
							<xsd:enumeration value="avg" />
							<xsd:enumeration value="count" />
							<xsd:enumeration value="min" />
							<xsd:enumeration value="max" />
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="fieldId" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be an id of an other field.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="resetOn" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							May be an id of a group, if it is set, the value is resetting when the group change.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="accumulateOn" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							May be an id of a group, if it is set, the value is agregatte when the group change.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="dbFields">
		<xsd:annotation>
			<xsd:documentation>
				This type represent the list off all the fields from the database.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="field" type="lqr:dbFieldObject" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="object" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				This type is the base element of all objects you want to draw in the result report.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Must be unique, represent the object id.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="x" type="xsd:int" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Represent the x coordinate of the object in the result report, it must be in the same scale as document unit.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="y" type="xsd:int" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Represent the y coordinate of the object in the result report, it must be in the same scale as document unit.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="color">
			<xsd:annotation>
				<xsd:documentation>
					Represent the color of the object in the result report, it must be HTML color code #00FF00.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="#[0-9a-fA-F]{6,6}" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="textObject" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from object, it represent a text object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:object">
				<xsd:attribute name="fontId" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be an id of a font object.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="align">
					<xsd:annotation>
						<xsd:documentation>
							May specify his alignment relative to the x coordinate, by default the object is left align.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="start" />
							<xsd:enumeration value="end" />
							<xsd:enumeration value="middle" />
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="format">
					<xsd:annotation>
						<xsd:documentation>
							May specify his format for real, date and dateTime value, it start with r letter for real or d letter for date and dateTime.
							real: first letter see format field of arg(double, ) method in Qt doc, follow by the number of decimal.
							date: see toString() method of QDate object in Qt doc.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:pattern value="r[eEfgG]?[0-9]*|d.*" />
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="lineObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from object, it represent a line object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:object">
				<xsd:attribute name="width" type="xsd:int" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be the width of the line, it must be in the same scale as document unit.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="height" type="xsd:int" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be the height of the line, it must be in the same scale as document unit.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="rectObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from lineObject, it represent a rect object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:lineObject" />
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="textFixedObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from textObject, it represent a text fixed object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:textObject">
				<xsd:attribute name="value" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be the value you want to be drawn on the result report.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="textFieldObject">
		<xsd:annotation>
			<xsd:documentation>
				This type is derived from textObject, it represent a text field object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="lqr:textObject">
				<xsd:attribute name="fieldId" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Must be the fieldId of the field to be drawn on the result report.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="docBand" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				This type is the base element of a band object you want to draw in the result report, it contains a list of drawable object like textFixedObject, textFieldObject, lineObject or rectObject.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="lqr:item" minOccurs="1" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="font">
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:string" use="required" />
			<xsd:attribute name="family" type="xsd:string" use="required" />
			<xsd:attribute name="size" type="xsd:int" use="required" />
			<xsd:attribute name="weight" default="Normal">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Light" />
						<xsd:enumeration value="Normal" />
						<xsd:enumeration value="DemiBold" /> 
						<xsd:enumeration value="Bold" />
						<xsd:enumeration value="Black" />
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" default="StyleNormal">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="StyleNormal" />
						<xsd:enumeration value="StyleItalic" />
						<xsd:enumeration value="StyleOblique" /> 
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="fonts">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:font" minOccurs="0" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="group">
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:string" use="required" />
			<xsd:attribute name="refer" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="groups">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:group" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="field" type="lqr:userFieldObject" />
	
	<xsd:element name="fields">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:field" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="dbField" type="lqr:dbFieldObject" />
	
	<xsd:element name="dbFields">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:dbField" maxOccurs="unbounded" /> 
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="item" type="lqr:object" />
	
	<xsd:element name="docBody">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="pageHeader">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="docHeader">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="docFooter">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="pageFooter">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="groupHeader">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand">
					<xsd:attribute name="groupId" type="xsd:string" use="required" />
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="groupFooter">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="lqr:docBand">
					<xsd:attribute name="groupId" type="xsd:string" use="required" />
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="groupHeaders">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:groupHeader" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
		
		<xsd:unique name="uniqueGroupHeaderId">
			<xsd:selector xpath="lqr:groupHeader" />
			<xsd:field xpath="@groupId" />
		</xsd:unique>
		
	</xsd:element>
	
	<xsd:element name="groupFooters">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:groupFooter" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
		
		<xsd:unique name="uniqueGroupFooterId">
			<xsd:selector xpath="lqr:groupFooter" />
			<xsd:field xpath="@groupId" />
		</xsd:unique>
		
	</xsd:element>
	
	<xsd:element name="body">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:pageHeader" minOccurs="0" />
				<xsd:element ref="lqr:docHeader" minOccurs="0" />
				<xsd:element ref="lqr:groupHeaders" minOccurs="0" />
				<xsd:element ref="lqr:docBody" />
				<xsd:element ref="lqr:groupFooters" minOccurs="0" />
				<xsd:element ref="lqr:docFooter" minOccurs="0" />
				<xsd:element ref="lqr:pageFooter" minOccurs="0" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="param">
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="params">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:param" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="connection">
		<xsd:complexType>
			<xsd:attribute name="driver" type="xsd:string" use="required" />
			<xsd:attribute name="host" type="xsd:string" use="required" />
			<xsd:attribute name="userName" type="xsd:string" use="required" />
			<xsd:attribute name="password" type="xsd:string" use="required" />
			<xsd:attribute name="dbName" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="query">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string"/>
		</xsd:simpleType>
	</xsd:element>
	
	<xsd:element name="database">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:params" minOccurs="0" />
				<xsd:element ref="lqr:connection" minOccurs="0" />
				<xsd:element ref="lqr:query" />
				<xsd:element ref="lqr:dbFields" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
			
	<xsd:element name="document">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="lqr:fonts" minOccurs="0" />
				<xsd:element ref="lqr:database" />
				<xsd:element ref="lqr:groups" minOccurs="0" />
				<xsd:element ref="lqr:fields" minOccurs="0" />
				<xsd:element ref="lqr:body" />
			</xsd:sequence>
			<xsd:attribute name="pageWidth" type="xsd:int" use="required" />
			<xsd:attribute name="pageHeight" use="required">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="[0-9]+|100%" />
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="unit" use="required">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="mm" />
						<xsd:enumeration value="in" />
						<xsd:enumeration value="px" /> 
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
		
		<xsd:unique name="uniqueFontId">
			<xsd:selector xpath="lqr:fonts/lqr:font" />
			<xsd:field xpath="@id" />
		</xsd:unique>
		
		<xsd:unique name="uniqueFieldId">
			<xsd:selector xpath="lqr:fields/lqr:field|lqr:database/lqr:dbFields/lqr:dbField" />
			<xsd:field xpath="@id" />
		</xsd:unique>
		
		<xsd:key name="keyDatabaseFieldId">
			<xsd:selector xpath="lqr:database/lqr:dbFields/lqr:dbField" />
			<xsd:field xpath="@id" />
		</xsd:key>
		
		<xsd:unique name="uniqueItemId">
			<xsd:selector xpath="lqr:body/*/lqr:item|lqr:body/lqr:groupHeaders/lqr:groupHeader/lqr:item|lqr:body/lqr:groupFooters/lqr:groupFooter/lqr:item" />
			<xsd:field xpath="@id" />
		</xsd:unique>
		
		<xsd:unique name="uniqueParamId">
			<xsd:selector xpath="lqr:database/lqr:params/lqr:param" />
			<xsd:field xpath="@id" />
		</xsd:unique>
		
		<xsd:unique name="uniqueGroupId">
			<xsd:selector xpath="lqr:groups/lqr:group" />
			<xsd:field xpath="@id" />
		</xsd:unique>
		
		<xsd:keyref name="uniqueFontIdRef" refer="lqr:uniqueFontId">
			<xsd:selector xpath="lqr:body/*/lqr:item|lqr:body/lqr:groupHeaders/lqr:groupHeader/lqr:item|lqr:body/lqr:groupFooters/lqr:groupFooter/lqr:item" />
			<xsd:field xpath="@fontId" />
		</xsd:keyref>
		
		<xsd:keyref name="uniqueFieldIdRef" refer="lqr:uniqueFieldId">
			<xsd:selector xpath="lqr:body/*/lqr:item|lqr:body/lqr:groupHeaders/lqr:groupHeader/lqr:item|lqr:body/lqr:groupFooters/lqr:groupFooter/lqr:item" />
			<xsd:field xpath="@fieldId" />
		</xsd:keyref>
		
		<xsd:keyref name="keyDatabaseFieldIdRef" refer="lqr:keyDatabaseFieldId">
			<xsd:selector xpath="lqr:groups/lqr:group" />
			<xsd:field xpath="@refer" />
		</xsd:keyref>
		
		<xsd:keyref name="keyUniqueGroupIdRefForResetOn" refer="lqr:uniqueGroupId">
			<xsd:selector xpath="lqr:fields/lqr:field" />
			<xsd:field xpath="@resetOn" />
		</xsd:keyref>
		
		<xsd:keyref name="keyUniqueGroupIdRefForAccumulateOn" refer="lqr:uniqueGroupId">
			<xsd:selector xpath="lqr:fields/lqr:field" />
			<xsd:field xpath="@accumulateOn" />
		</xsd:keyref>
		
		<xsd:keyref name="keyFieldIdRef" refer="lqr:uniqueFieldId">
			<xsd:selector xpath="lqr:fields/lqr:field" />
			<xsd:field xpath="@fieldId" />
		</xsd:keyref>
		
		<xsd:keyref name="keyUniqueGroupHeaderRef" refer="lqr:uniqueGroupId">
			<xsd:selector xpath="lqr:body/lqr:groupHeaders/lqr:groupHeader" />
			<xsd:field xpath="@groupId" />
		</xsd:keyref>
		
		<xsd:keyref name="keyUniqueGroupFooterRef" refer="lqr:uniqueGroupId">
			<xsd:selector xpath="lqr:body/lqr:groupFooters/lqr:groupFooter" />
			<xsd:field xpath="@groupId" />
		</xsd:keyref>
	</xsd:element>
</xsd:schema>
